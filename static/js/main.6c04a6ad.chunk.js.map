{"version":3,"sources":["components/css/navbar.module.css","components/css/post.module.css","app.module.css","redux/posts/postAction.js","redux/posts/postActionTypes.js","components/postComponent.js","components/navbarComponent.js","components/favouritePostComponent.js","App.js","serviceWorker.js","redux/cake/cakeReducer.js","redux/icecream/icecreamReducer.js","redux/candy/candyReducer.js","redux/posts/postReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["module","exports","removePostFromFavourite","postId","type","payload","PostComponent","this","props","fetchPost","postData","className","style","postTab","postContainerTitle","loading","error","posts","map","post","postContainer","key","id","postTitle","title","postBody","body","addPostToFavouriteButton","addFavouriteButton","onClick","addPostToFavourite","removeFromFavourite","Component","connect","state","postState","dispatch","axios","get","then","res","data","fetchPostsSuccess","catch","err","errMessage","message","NavbarComponent","styles","navbar","logo","FaviouritePostComponent","favouritePosts","useSelector","favouritePost","useDispatch","favouritePostTab","favouritePostContainerTitle","length","favouritePostContainer","favouritePostTitle","favouritePostBody","noFavouritePost","App","contentContainer","Boolean","window","location","hostname","match","initialState","cakeType","numOfCakes","cakeReducer","action","numOfIcecream","icecreamReducer","numOfCandy","cakeState","icecreamState","rootReducer","combineReducers","candyState","newPosts","filteredFavPost","filter","composerEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6c04a6ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"navbar_navbar__3SrOq\",\"logo\":\"navbar_logo__2qGJ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"post_postContainer__9Pj96\",\"postTitle\":\"post_postTitle__1VmcJ\",\"postBody\":\"post_postBody__2vSP6\",\"postTab\":\"post_postTab__pTnzt\",\"postContainerTitle\":\"post_postContainerTitle__2sBsJ\",\"addFavouriteButton\":\"post_addFavouriteButton__1FECq\",\"favouritePostContainer\":\"post_favouritePostContainer__3bhAW\",\"favouritePostTab\":\"post_favouritePostTab__-S7g-\",\"favouritePostContainerTitle\":\"post_favouritePostContainerTitle__3P0Vb\",\"favouritePostTitle\":\"post_favouritePostTitle__kvKMI\",\"favouritePostBody\":\"post_favouritePostBody__-W8u2\",\"noFavouritePost\":\"post_noFavouritePost__2sMvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"app_contentContainer__A6dbJ\"};","//Action Creators\r\n\r\nimport { FETCH_POST_REQUEST, \r\n        FETCH_POST_SUCCESS,\r\n         FETCH_POST_FAILURE,\r\n         ADD_POST_TO_FAVIOURITE,\r\n        REMOVE_POST_FROM_FAVIOURITE } from \"./postActionTypes\";\r\nimport axios from 'axios';\r\n\r\nexport const fetchPostsRequest=()=>{\r\n    return{\r\n        type:FETCH_POST_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchPostsSuccess = posts => {     \r\n    return {\r\n        type:FETCH_POST_SUCCESS,\r\n        payload:posts\r\n    }\r\n}\r\n\r\nexport const fetchPostsFailure = error =>{\r\n    return{\r\n        type:FETCH_POST_FAILURE,\r\n        payload:error\r\n    }\r\n}\r\n\r\nexport const addPostToFavourite = post =>{\r\n    return{\r\n        type:ADD_POST_TO_FAVIOURITE,\r\n        payload:post\r\n    }\r\n}\r\n\r\nexport const removePostFromFavourite = postId => {\r\n    return{\r\n        type:REMOVE_POST_FROM_FAVIOURITE,\r\n        payload:postId\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//In this action we will return function and \r\n//this fuction does not have to be pure function\r\n//It can make async requests\r\nexport const fetchPosts = ()=>{\r\n    return  (dispatch)=>{\r\n        dispatch(fetchPostsRequest());\r\n         axios.get('https://jsonplaceholder.typicode.com/posts')\r\n                .then(res=>{\r\n                    \r\n                    //Add property to the data object \"addPostToFavouriteButton\"\r\n                    const posts = res.data.map(post => {\r\n                        return {\r\n                            ...post,\r\n                            addPostToFavouriteButton : true\r\n                        }\r\n                    });\r\n                    dispatch(fetchPostsSuccess(posts))\r\n                })\r\n                .catch(err => {\r\n                    const errMessage = err.message;\r\n                    dispatch(fetchPostsFailure(errMessage));\r\n                })\r\n    }\r\n}","export const FETCH_POST_REQUEST ='FETCH_POST_REQUEST';\r\nexport const FETCH_POST_SUCCESS ='FETCH_POST_SUCCESS';\r\nexport const FETCH_POST_FAILURE ='FETCH_POST_FAILURE';\r\nexport const ADD_POST_TO_FAVIOURITE ='ADD_POST_TO_FAVIOURITE';\r\nexport const REMOVE_POST_FROM_FAVIOURITE ='REMOVE_POST_FROM_FAVIOURITE';","import React, { Component } from 'react';\r\nimport {fetchPosts, addPostToFavourite, removePostFromFavourite} from '../redux/posts/postAction';\r\nimport {connect} from 'react-redux'\r\nimport style from './css/post.module.css';\r\n\r\n\r\n class PostComponent extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchPost()\r\n    }\r\n\r\n    render() {\r\n        const {postData} = this.props;\r\n        \r\n        const posts = () => {\r\n            if(postData.loading){\r\n                return(\r\n                    <h2>Loading...</h2>\r\n                )\r\n            }else if(postData.error){\r\n                return(\r\n                <h3>Error:{postData.error}</h3>\r\n                )\r\n            }else {\r\n                return (\r\n                    postData.posts.map(post =>{\r\n                        return (\r\n                                <div className={style.postContainer} key={post.id}>\r\n                                    <h3 className={style.postTitle}>{post.title}</h3>\r\n                                    <p className={style.postBody}>{post.body}</p>\r\n                                    {post.addPostToFavouriteButton?                                    \r\n                                    <button className={style.addFavouriteButton} onClick={()=>this.props.addPostToFavourite(post)}>Add to favourite</button>:\r\n                                    <button className={style.addFavouriteButton} onClick={()=>this.props.removeFromFavourite(post.id)}>Remove </button>\r\n                                    }\r\n                                </div>\r\n                        )   \r\n                    })                    \r\n                )\r\n            }    \r\n        }\r\n\r\n        return (\r\n            <div className={style.postTab}>\r\n                <h1 className={style.postContainerTitle}>Posts</h1>\r\n                {posts()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>({\r\n    postData: state.postState\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        fetchPost:()=>dispatch(fetchPosts()),\r\n        addPostToFavourite:(post)=>dispatch(addPostToFavourite(post)),\r\n        removeFromFavourite:(postId)=>dispatch(removePostFromFavourite(postId))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostComponent);\r\n","import React from 'react'\r\nimport styles from './css/navbar.module.css';\r\n\r\nexport default function NavbarComponent() {\r\n    return (\r\n        <div className={styles.navbar}>\r\n            <h1 className={styles.logo}>React Redux Posts App</h1>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport style from './css/post.module.css';\r\nimport {removePostFromFavourite} from '../redux/posts/postAction'\r\n\r\n\r\n\r\nexport default function FaviouritePostComponent() {\r\n\r\n\r\n    const postState = useSelector(state => state.postState);\r\n    const favouritePosts = postState.favouritePost ;\r\n    const dispatch = useDispatch();\r\n\r\n    const favPosts = () => {\r\n            \r\n        if(favouritePosts.length){\r\n            return (\r\n            favouritePosts.map(post =>{\r\n\r\n                return (\r\n                    <div className={style.favouritePostContainer} key={post.id}>\r\n                        <h3 className={style.favouritePostTitle}>{post.title}</h3>\r\n                        <p className={style.favouritePostBody}>{post.body}</p>\r\n                        <button className={style.addFavouriteButton} onClick={()=>dispatch(removePostFromFavourite(post.id))}>Remove</button>\r\n\r\n                    </div>\r\n                )\r\n\r\n            })\r\n            )            \r\n        }else { \r\n            return(\r\n                <h3 className={style.noFavouritePost}>No Favourite post</h3>\r\n            )            \r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.favouritePostTab}>            \r\n            <h1 className={style.favouritePostContainerTitle}>  Favourite Posts</h1>\r\n            {favPosts()}\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n","import React from 'react';\n// import CakeComponent from './components/cakeComponent';\n// import IcecreamComponent from './components/iceCreamComponent';\n// import CandyComponent from './components/candyComponent';\nimport PostComponent from './components/postComponent';\nimport NavbarComponent from './components/navbarComponent';\nimport FavouritePostComponent from './components/favouritePostComponent';\nimport style from './app.module.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarComponent/>\n      {/* <CakeComponent/>\n      <IcecreamComponent />\n      <CandyComponent /> */}\n      <div className = {style.contentContainer}>\n        <PostComponent />\n        <FavouritePostComponent />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nconst initialState = {\r\n    cakeType:'Black forest',\r\n    numOfCakes:10\r\n}\r\n\r\nconst cakeReducer = (state = initialState, action)=>{\r\n\r\n    switch(action.type){\r\n\r\n        case 'INCREMENT_CAKE': {\r\n\r\n            return {\r\n                ...state,\r\n                numOfCakes:state.numOfCakes + 1\r\n            }\r\n        }\r\n        case 'DECREMENT_CAKE': {\r\n            return {\r\n                ...state,\r\n                numOfCakes:state.numOfCakes - 1\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default cakeReducer;","const initialState = {\r\n    numOfIcecream: 50\r\n}\r\n\r\n\r\nconst icecreamReducer = (state = initialState , action) =>{\r\n\r\n    switch (action.type) {\r\n        case 'INCREMENT_ICECREAM':{\r\n            return {\r\n                ...state,\r\n                numOfIcecream: state.numOfIcecream + 1\r\n            }\r\n        }\r\n        case 'DECREMENT_ICECREAM': {\r\n            return {\r\n                ...state,\r\n                numOfIcecream:state.numOfIcecream - 1\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default icecreamReducer;","const initialState = {\r\n    numOfCandy:100\r\n}\r\n\r\nexport const candyReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        \r\n        case 'INCREMENT_CANDY': return {\r\n            ...state,\r\n            numOfCandy:state.numOfCandy + 1\r\n        }\r\n        case 'DECREMENT_CANDY': return {\r\n            ...state,\r\n            numOfCandy:state.numOfCandy - 1\r\n        }\r\n        default: return state\r\n\r\n    }\r\n}\r\n\r\n//export candyReducer;","import { FETCH_POST_REQUEST,\r\n     FETCH_POST_SUCCESS, \r\n     FETCH_POST_FAILURE, \r\n     ADD_POST_TO_FAVIOURITE,\r\n     REMOVE_POST_FROM_FAVIOURITE } from \"./postActionTypes\"\r\n\r\nconst initialState = {\r\n    loading:false,\r\n    posts:[],\r\n    favouritePost:[],\r\n    error:''\r\n}\r\n\r\nexport const postReducer = (state = initialState, action)=>{\r\n    //console.log(state);\r\n\r\n    switch(action.type){\r\n        case FETCH_POST_REQUEST: \r\n        return{\r\n            ...state,\r\n            loading:true\r\n        }\r\n\r\n        case FETCH_POST_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                posts:action.payload,\r\n                error:''\r\n            }\r\n\r\n        case FETCH_POST_FAILURE:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                posts:[],\r\n                error:action.payload\r\n            }\r\n\r\n        case ADD_POST_TO_FAVIOURITE:{\r\n            const newPosts = state.posts.map(post => {\r\n                if(post.id === action.payload.id){   \r\n                    return {\r\n                        ...post,\r\n                        addPostToFavouriteButton: !post.addPostToFavouriteButton\r\n                    }                                 \r\n                }\r\n                return post\r\n            })\r\n            return{\r\n                ...state,\r\n                posts:newPosts,\r\n                favouritePost:[...state.favouritePost, action.payload]\r\n            }\r\n        }\r\n\r\n        case REMOVE_POST_FROM_FAVIOURITE:{\r\n            const newPosts = state.posts.map(post => {\r\n                if(post.id === action.payload){   \r\n                    return {\r\n                        ...post,\r\n                        addPostToFavouriteButton: !post.addPostToFavouriteButton\r\n                    }             \r\n                    \r\n                }\r\n                return post\r\n            })\r\n\r\n\r\n            const filteredFavPost = state.favouritePost.filter(post => post.id !== action.payload)\r\n\r\n            return{\r\n                ...state,\r\n                posts: newPosts,\r\n                favouritePost: filteredFavPost\r\n            }\r\n\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n","import {combineReducers} from 'redux';\r\nimport cakeReducer from './cake/cakeReducer';\r\nimport icecreamReducer from './icecream/icecreamReducer';\r\nimport {candyReducer as candyState}  from './candy/candyReducer'\r\nimport {postReducer as postState} from './posts/postReducer'\r\n\r\nconst cakeState = cakeReducer;\r\nconst icecreamState = icecreamReducer\r\n\r\nconst rootReducer = combineReducers({\r\n    cakeState, \r\n    icecreamState, \r\n    candyState,\r\n    postState\r\n});\r\n\r\nexport default rootReducer;","import {createStore, compose,applyMiddleware} from 'redux';\r\nimport rootReducer from './rootReducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst composerEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composerEnhancer(applyMiddleware(thunk))\r\n    );\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}